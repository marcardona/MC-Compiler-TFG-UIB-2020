
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compilador;

import exceptions.SymbolTableException;
import exceptions.ComparisionException;
import exceptions.StackException;
import exceptions.SyntaxException;
import exceptions.ValueTypeException;
import java.util.ArrayList;
import java.io.File;
import exceptions.IntermediateCodeException;
import data.AccesoFichero;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\024\005\000\002\025" +
    "\002\000\002\053\003\000\002\053\003\000\002\036\004" +
    "\000\002\037\003\000\002\002\012\000\002\002\002\000" +
    "\002\026\002\000\002\027\003\000\002\035\003\000\002" +
    "\003\005\000\002\003\003\000\002\003\005\000\002\003" +
    "\003\000\002\004\004\000\002\004\002\000\002\005\006" +
    "\000\002\005\002\000\002\006\005\000\002\006\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\012\006\000\002\013\006\000\002\014\010\000" +
    "\002\014\010\000\002\015\010\000\002\040\003\000\002" +
    "\017\005\000\002\017\003\000\002\041\002\000\002\020" +
    "\007\000\002\043\003\000\002\042\003\000\002\047\003" +
    "\000\002\047\003\000\002\016\003\000\002\016\005\000" +
    "\002\046\005\000\002\046\003\000\002\046\003\000\002" +
    "\046\007\000\002\046\002\000\002\046\010\000\002\046" +
    "\005\000\002\050\005\000\002\050\003\000\002\050\005" +
    "\000\002\050\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\021\006\000\002\022\004\000\002" +
    "\023\010\000\002\023\006\000\002\044\002\000\002\045" +
    "\002\000\002\030\010\000\002\030\010\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\031\010\000" +
    "\002\031\010\000\002\031\010\000\002\031\010\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\032\006\000\002\033\006\000\002\034\007\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\006\000\002\011" +
    "\006\000\002\011\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\002\uffff\006\uffff\001\002\000\006\002" +
    "\ufff9\006\ufff9\001\002\000\004\002\006\001\002\000\004" +
    "\002\001\001\002\000\006\002\ufff8\006\010\001\002\000" +
    "\006\051\012\052\015\001\002\000\004\002\000\001\002" +
    "\000\012\032\ufffd\033\ufffd\034\ufffd\035\ufffd\001\002\000" +
    "\006\051\017\052\022\001\002\000\004\033\016\001\002" +
    "\000\012\032\ufffe\033\ufffe\034\ufffe\035\ufffe\001\002\000" +
    "\006\051\ufffc\052\ufffc\001\002\000\006\034\ufff2\035\ufff2" +
    "\001\002\000\006\034\ufffb\035\151\001\002\000\004\034" +
    "\024\001\002\000\006\034\ufff4\035\ufff4\001\002\000\032" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\020\uffee\024" +
    "\uffee\037\uffee\040\uffee\041\uffee\051\uffee\052\uffee\001\002" +
    "\000\032\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\020" +
    "\ufff7\024\ufff7\037\ufff7\040\ufff7\041\ufff7\051\ufff7\052\ufff7" +
    "\001\002\000\032\010\ufff0\011\056\012\040\013\044\014" +
    "\054\020\053\024\045\037\055\040\047\041\034\051\012" +
    "\052\015\001\002\000\010\032\uffec\033\147\035\uffec\001" +
    "\002\000\044\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\020\uffe4\022\uffe4\024\uffe4\025\uffe4\026" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\051\uffe4\052\uffe4\001\002" +
    "\000\044\010\ufff0\011\056\012\040\013\044\014\054\015" +
    "\ufff0\016\ufff0\020\053\022\ufff0\024\045\025\ufff0\026\ufff0" +
    "\037\055\040\047\041\034\051\012\052\015\001\002\000" +
    "\044\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\020\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\037" +
    "\uffeb\040\uffeb\041\uffeb\051\uffeb\052\uffeb\001\002\000\006" +
    "\025\314\026\315\001\002\000\004\010\313\001\002\000" +
    "\004\033\307\001\002\000\044\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\022\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\037\uffe2\040\uffe2\041\uffe2\051\uffe2" +
    "\052\uffe2\001\002\000\044\010\uffe8\011\uffe8\012\uffe8\013" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\022\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\037\uffe8\040\uffe8\041\uffe8\051\uffe8\052" +
    "\uffe8\001\002\000\006\032\301\035\300\001\002\000\004" +
    "\033\275\001\002\000\044\010\uffe9\011\uffe9\012\uffe9\013" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\020\uffe9\022\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\037\uffe9\040\uffe9\041\uffe9\051\uffe9\052" +
    "\uffe9\001\002\000\044\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\020\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\037\uffe6\040\uffe6\041\uffe6\051\uffe6\052\uffe6" +
    "\001\002\000\032\004\uffcd\005\uffcd\021\uffcd\023\071\036" +
    "\100\042\070\043\120\044\122\051\074\052\065\053\076" +
    "\054\075\001\002\000\004\033\257\001\002\000\032\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\020\uffbf\024\uffbf\025\uffbf" +
    "\037\uffbf\040\uffbf\041\uffbf\051\uffbf\052\uffbf\001\002\000" +
    "\044\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\020\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\037" +
    "\uffe3\040\uffe3\041\uffe3\051\uffe3\052\uffe3\001\002\000\004" +
    "\033\176\001\002\000\044\010\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\016\uffe7\020\uffe7\022\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\037\uffe7\040\uffe7\041\uffe7\051\uffe7\052" +
    "\uffe7\001\002\000\044\010\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\020\uffe5\022\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\037\uffe5\040\uffe5\041\uffe5\051\uffe5\052\uffe5" +
    "\001\002\000\044\010\uffea\011\uffea\012\uffea\013\uffea\014" +
    "\uffea\015\uffea\016\uffea\020\uffea\022\uffea\024\uffea\025\uffea" +
    "\026\uffea\037\uffea\040\uffea\041\uffea\051\uffea\052\uffea\001" +
    "\002\000\032\004\uffd7\005\uffd7\021\uffd7\023\uffd7\036\uffd7" +
    "\042\uffd7\043\uffd7\044\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\001\002\000\032\004\uffcd\005\uffcd\017\uffcd\023\071" +
    "\036\100\042\070\043\120\044\122\051\074\052\065\053" +
    "\076\054\075\001\002\000\004\033\062\001\002\000\004" +
    "\033\057\001\002\000\006\051\012\052\015\001\002\000" +
    "\004\034\061\001\002\000\044\010\uffe1\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\020\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\037\uffe1\040\uffe1\041\uffe1\051\uffe1" +
    "\052\uffe1\001\002\000\006\051\012\052\015\001\002\000" +
    "\004\035\064\001\002\000\026\004\072\005\066\007\077" +
    "\023\071\036\100\042\070\051\074\052\065\053\076\054" +
    "\075\001\002\000\022\004\uff8c\005\uff8c\017\uff8c\021\uff8c" +
    "\034\uff8c\044\uff8c\047\uff8c\050\uff8c\001\002\000\020\004" +
    "\uffba\005\uffba\017\uffba\021\uffba\034\uffba\035\uffba\046\uffba" +
    "\001\002\000\004\034\112\001\002\000\004\033\107\001" +
    "\002\000\004\033\102\001\002\000\020\004\uffbb\005\uffbb" +
    "\017\uffbb\021\uffbb\034\uffbb\035\uffbb\046\uffbb\001\002\000" +
    "\004\034\101\001\002\000\022\004\uff90\005\uff90\017\uff90" +
    "\021\uff90\034\uff90\044\uff90\047\uff90\050\uff90\001\002\000" +
    "\022\004\uff8f\005\uff8f\017\uff8f\021\uff8f\034\uff8f\044\uff8f" +
    "\047\uff8f\050\uff8f\001\002\000\022\004\uff8e\005\uff8e\017" +
    "\uff8e\021\uff8e\034\uff8e\044\uff8e\047\uff8e\050\uff8e\001\002" +
    "\000\020\004\uffb9\005\uffb9\017\uffb9\021\uffb9\034\uffb9\035" +
    "\uffb9\046\uffb9\001\002\000\022\004\uff8d\005\uff8d\017\uff8d" +
    "\021\uff8d\034\uff8d\044\uff8d\047\uff8d\050\uff8d\001\002\000" +
    "\044\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\020\uffbc\022\uffbc\024\uffbc\025\uffbc\026\uffbc\037" +
    "\uffbc\040\uffbc\041\uffbc\051\uffbc\052\uffbc\001\002\000\006" +
    "\007\103\052\104\001\002\000\004\034\106\001\002\000" +
    "\004\034\105\001\002\000\022\004\uff8b\005\uff8b\017\uff8b" +
    "\021\uff8b\034\uff8b\044\uff8b\047\uff8b\050\uff8b\001\002\000" +
    "\022\004\uff8a\005\uff8a\017\uff8a\021\uff8a\034\uff8a\044\uff8a" +
    "\047\uff8a\050\uff8a\001\002\000\006\051\012\052\015\001" +
    "\002\000\004\034\111\001\002\000\022\004\uff89\005\uff89" +
    "\017\uff89\021\uff89\034\uff89\044\uff89\047\uff89\050\uff89\001" +
    "\002\000\044\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\020\uffbd\022\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\037\uffbd\040\uffbd\041\uffbd\051\uffbd\052\uffbd\001\002" +
    "\000\012\004\uffcf\005\uffcf\017\uffcf\021\uffcf\001\002\000" +
    "\010\044\157\047\155\050\156\001\002\000\012\004\uffd0" +
    "\005\uffd0\017\uffd0\021\uffd0\001\002\000\004\017\136\001" +
    "\002\000\012\004\uffd3\005\uffd3\017\uffd3\021\uffd3\001\002" +
    "\000\004\033\133\001\002\000\010\004\130\005\131\017" +
    "\uffdc\001\002\000\004\043\123\001\002\000\004\033\124" +
    "\001\002\000\006\051\012\052\015\001\002\000\004\034" +
    "\126\001\002\000\012\004\uff91\005\uff91\017\uff91\021\uff91" +
    "\001\002\000\034\004\uffcd\005\uffcd\017\uffcd\021\uffcd\023" +
    "\071\036\100\042\070\043\120\044\122\051\074\052\065" +
    "\053\076\054\075\001\002\000\034\004\uffd5\005\uffd5\017" +
    "\uffd5\021\uffd5\023\uffd5\036\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\001\002\000\034\004" +
    "\uffd4\005\uffd4\017\uffd4\021\uffd4\023\uffd4\036\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\001" +
    "\002\000\012\004\uffd2\005\uffd2\017\uffd2\021\uffd2\001\002" +
    "\000\006\051\012\052\015\001\002\000\004\034\135\001" +
    "\002\000\012\004\uff92\005\uff92\017\uff92\021\uff92\001\002" +
    "\000\034\011\056\012\040\013\044\014\054\015\ufff0\016" +
    "\ufff0\020\053\024\045\037\055\040\047\041\034\051\012" +
    "\052\015\001\002\000\004\033\147\001\002\000\006\015" +
    "\uffd9\016\141\001\002\000\032\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\020\uffd9\024\uffd9\037\uffd9\040\uffd9\041" +
    "\uffd9\051\uffd9\052\uffd9\001\002\000\004\015\uffda\001\002" +
    "\000\004\015\144\001\002\000\044\010\uffdd\011\uffdd\012" +
    "\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\020\uffdd\022\uffdd" +
    "\024\uffdd\025\uffdd\026\uffdd\037\uffdd\040\uffdd\041\uffdd\051" +
    "\uffdd\052\uffdd\001\002\000\032\011\056\012\040\013\044" +
    "\014\054\015\ufff0\020\053\024\045\037\055\040\047\041" +
    "\034\051\012\052\015\001\002\000\004\015\uffdb\001\002" +
    "\000\006\051\017\052\022\001\002\000\006\034\152\035" +
    "\151\001\002\000\006\051\153\052\154\001\002\000\044" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\020\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\051\uffc3\052\uffc3\001\002\000\006\034" +
    "\ufff3\035\ufff3\001\002\000\006\034\ufff5\035\ufff5\001\002" +
    "\000\004\045\173\001\002\000\026\004\072\005\066\007" +
    "\077\023\071\036\100\042\070\051\074\052\065\053\076" +
    "\054\075\001\002\000\004\047\160\001\002\000\004\045" +
    "\161\001\002\000\012\004\072\005\066\007\077\051\162" +
    "\001\002\000\006\035\uffc9\046\uffc9\001\002\000\006\035" +
    "\165\046\166\001\002\000\006\035\uffc7\046\uffc7\001\002" +
    "\000\012\004\072\005\066\007\077\051\167\001\002\000" +
    "\012\004\uffcc\005\uffcc\017\uffcc\021\uffcc\001\002\000\006" +
    "\035\uffca\046\uffca\001\002\000\006\035\uffc8\046\uffc8\001" +
    "\002\000\012\004\uffd1\005\uffd1\017\uffd1\021\uffd1\001\002" +
    "\000\012\004\uffcb\005\uffcb\017\uffcb\021\uffcb\001\002\000" +
    "\012\004\072\005\066\007\077\051\162\001\002\000\006" +
    "\035\165\046\175\001\002\000\012\004\uffce\005\uffce\017" +
    "\uffce\021\uffce\001\002\000\006\051\012\052\015\001\002" +
    "\000\004\035\200\001\002\000\116\004\072\005\066\006" +
    "\206\007\077\010\231\011\241\012\225\013\216\014\217" +
    "\015\226\016\227\017\232\020\204\021\202\022\214\023" +
    "\213\024\223\025\207\026\234\027\203\030\233\031\237" +
    "\032\201\033\210\034\222\035\211\036\215\037\230\040" +
    "\245\041\221\042\205\043\220\044\244\045\243\046\236" +
    "\047\242\051\212\052\235\001\002\000\004\034\uffa1\001" +
    "\002\000\004\034\uffaa\001\002\000\004\034\uffa4\001\002" +
    "\000\004\034\uffab\001\002\000\004\034\uff99\001\002\000" +
    "\004\034\uffb4\001\002\000\004\034\uffa6\001\002\000\004" +
    "\034\uffa0\001\002\000\004\034\uff9e\001\002\000\004\034" +
    "\251\001\002\000\004\034\uffa8\001\002\000\004\034\uffa9" +
    "\001\002\000\004\034\uff9d\001\002\000\004\034\uffb0\001" +
    "\002\000\004\034\uffaf\001\002\000\004\034\uff98\001\002" +
    "\000\004\034\uff9a\001\002\000\004\034\uff9f\001\002\000" +
    "\004\034\uffa7\001\002\000\004\034\250\001\002\000\004" +
    "\034\uffb1\001\002\000\004\034\uffae\001\002\000\004\034" +
    "\uffad\001\002\000\004\034\uff9c\001\002\000\004\034\uffb3" +
    "\001\002\000\004\034\uffac\001\002\000\004\034\uffa3\001" +
    "\002\000\004\034\uffa5\001\002\000\004\034\247\001\002" +
    "\000\004\034\uff95\001\002\000\004\034\uffa2\001\002\000" +
    "\004\034\246\001\002\000\004\034\uffb2\001\002\000\004" +
    "\034\uff94\001\002\000\004\034\uff96\001\002\000\004\034" +
    "\uff97\001\002\000\004\034\uff9b\001\002\000\044\010\uffb7" +
    "\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020" +
    "\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\051\uffb7\052\uffb7\001\002\000\044\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8" +
    "\022\uffb8\024\uffb8\025\uffb8\026\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\051\uffb8\052\uffb8\001\002\000\044\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\020\uffb5\022" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\037\uffb5\040\uffb5\041\uffb5" +
    "\051\uffb5\052\uffb5\001\002\000\044\010\uffb6\011\uffb6\012" +
    "\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\020\uffb6\022\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\037\uffb6\040\uffb6\041\uffb6\051" +
    "\uffb6\052\uffb6\001\002\000\032\011\056\012\040\013\044" +
    "\014\054\020\053\024\045\025\ufff0\037\055\040\047\041" +
    "\034\051\012\052\015\001\002\000\004\025\254\001\002" +
    "\000\034\011\uffbe\012\uffbe\013\uffbe\014\uffbe\020\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\037\uffbe\040\uffbe\041\uffbe\051\uffbe" +
    "\052\uffbe\001\002\000\034\011\056\012\040\013\044\014" +
    "\054\020\053\024\045\025\ufff0\026\ufff0\037\055\040\047" +
    "\041\034\051\012\052\015\001\002\000\006\025\uffc1\026" +
    "\uffc1\001\002\000\010\007\260\051\012\052\015\001\002" +
    "\000\004\035\265\001\002\000\004\035\262\001\002\000" +
    "\020\023\071\036\100\042\070\051\074\052\065\053\076" +
    "\054\075\001\002\000\004\034\264\001\002\000\044\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\020\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\051\uffdf\052\uffdf\001\002\000\004\053\266" +
    "\001\002\000\004\034\267\001\002\000\044\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\020\uffde" +
    "\022\uffde\024\uffde\025\uffde\026\uffde\037\uffde\040\uffde\041" +
    "\uffde\051\uffde\052\uffde\001\002\000\004\021\272\001\002" +
    "\000\010\004\130\005\131\021\uffd6\001\002\000\032\011" +
    "\056\012\040\013\044\014\054\020\053\022\ufff0\024\045" +
    "\037\055\040\047\041\034\051\012\052\015\001\002\000" +
    "\004\022\274\001\002\000\044\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\020\uffd8\022\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\037\uffd8\040\uffd8\041\uffd8\051\uffd8" +
    "\052\uffd8\001\002\000\006\051\012\052\015\001\002\000" +
    "\004\034\277\001\002\000\044\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\020\uffe0\022\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\037\uffe0\040\uffe0\041\uffe0\051\uffe0" +
    "\052\uffe0\001\002\000\006\051\012\052\015\001\002\000" +
    "\010\027\302\030\305\031\303\001\002\000\032\010\uffc5" +
    "\011\uffc5\012\uffc5\013\uffc5\014\uffc5\020\uffc5\024\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\051\uffc5\052\uffc5\001\002\000\032" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\020\uffc4\024" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\051\uffc4\052\uffc4\001\002" +
    "\000\032\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\020" +
    "\uffef\024\uffef\037\uffef\040\uffef\041\uffef\051\uffef\052\uffef" +
    "\001\002\000\032\010\uffc6\011\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\020\uffc6\024\uffc6\037\uffc6\040\uffc6\041\uffc6\051\uffc6" +
    "\052\uffc6\001\002\000\006\032\uffed\035\uffed\001\002\000" +
    "\006\051\012\052\015\001\002\000\004\034\311\001\002" +
    "\000\044\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015" +
    "\uff93\016\uff93\020\uff93\022\uff93\024\uff93\025\uff93\026\uff93" +
    "\037\uff93\040\uff93\041\uff93\051\uff93\052\uff93\001\002\000" +
    "\006\002\ufffa\006\ufffa\001\002\000\006\002\ufff6\006\ufff6" +
    "\001\002\000\034\011\uffbe\012\uffbe\013\uffbe\014\uffbe\020" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\051\uffbe\052\uffbe\001\002\000\044\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\020\uffc2\022\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\037\uffc2\040\uffc2\041\uffc2\051" +
    "\uffc2\052\uffc2\001\002\000\034\011\056\012\040\013\044" +
    "\014\054\020\053\024\045\025\ufff0\026\ufff0\037\055\040" +
    "\047\041\034\051\012\052\015\001\002\000\006\025\uffc0" +
    "\026\uffc0\001\002\000\016\010\ufff1\015\ufff1\016\ufff1\022" +
    "\ufff1\025\ufff1\026\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\024\004\025\003\001\001\000\004\002" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\010\001\001\000\006\036\012\053\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\017\037\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\022" +
    "\001\001\000\002\001\001\000\004\005\024\001\001\000" +
    "\002\001\001\000\042\004\032\006\036\010\027\012\030" +
    "\013\051\014\040\015\035\020\047\021\041\022\050\023" +
    "\031\030\026\031\045\032\034\043\042\053\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\317\010" +
    "\027\012\030\013\051\014\040\015\035\020\047\021\041" +
    "\022\050\023\031\030\026\031\045\032\034\043\042\053" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\113\016\270\033" +
    "\114\034\112\042\267\046\116\001\001\000\002\001\001" +
    "\000\004\044\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\011\113\016\120\033\114\034" +
    "\112\040\115\046\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\062\001\001\000\002\001\001" +
    "\000\006\011\066\051\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\113\033\114" +
    "\034\112\046\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\004\137\010\027\012" +
    "\030\013\051\014\040\015\035\020\047\021\041\022\050" +
    "\023\031\030\026\031\045\032\034\043\042\053\136\001" +
    "\001\000\002\001\001\000\006\017\142\041\141\001\001" +
    "\000\004\041\144\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\004\145\010\027\012\030" +
    "\013\051\014\040\015\035\020\047\021\041\022\050\023" +
    "\031\030\026\031\045\032\034\043\042\053\136\001\001" +
    "\000\002\001\001\000\004\003\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\170\051" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\050\162\051\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\050\173\051\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\053\176\001" +
    "\001\000\002\001\001\000\006\051\237\052\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\004\252\010" +
    "\027\012\030\013\051\014\040\015\035\020\047\021\041" +
    "\022\050\023\031\030\026\031\045\032\034\043\042\053" +
    "\136\001\001\000\002\001\001\000\004\045\254\001\001" +
    "\000\040\004\255\010\027\012\030\013\051\014\040\015" +
    "\035\020\047\021\041\022\050\023\031\030\026\031\045" +
    "\032\034\043\042\053\136\001\001\000\002\001\001\000" +
    "\004\053\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\126\001\001\000\040\004" +
    "\272\010\027\012\030\013\051\014\040\015\035\020\047" +
    "\021\041\022\050\023\031\030\026\031\045\032\034\043" +
    "\042\053\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\305\001\001\000\004\007\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\045\315\001\001\000\002\001\001" +
    "\000\040\004\316\010\027\012\030\013\051\014\040\015" +
    "\035\020\047\021\041\022\050\023\031\030\026\031\045" +
    "\032\034\043\042\053\136\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
    return scanner.next_token(); 
    }



	/**
	 * Trabajo de Final de Grado
	 * Alumna: Maria del Mar Cardona Aranda
	 * Tutor: Pere Palmer
	 * Curso: 2019-2020
	 */
    
    /**
     * Scanner. Análisis sintáctico.
     */
    private Scanner scanner;
    /**
     * Tabla de símbolos.
     */
    private TablaDeSimbolos ts;
    /**
     * Nombre del programa principal.
     * Main program.
     */
    private String mainProgram;
    /**
     * Directorio del proyecto.
     */
    private String projectPath;
	/**
	 * Vector de entrada.
	 */
	private String entVector;
    /**
     * Lista del código de 3 direcciones.
     */
    private C3D listCode;
    /**
     * Tablas. 
     * Tabla de variables. 
     * Tabla de procedimientos.
     * Tabla de eiquetas.
     */
    private Tablas tables; 
    /**
	 * Lista de funciones.
     * Funciones que han sido llamadas antes de ser declaradas.
	 */
    private ArrayList<ParserFunc> functions;
	/**
	 * Profundidad del condicional.
     * Se usa para controlar las etiquetas del código intermedio.
	 */
	private int ifLevel;
	 /**
	 * Etiquetas de condicional.
	 * Se usa para controlar las etiquetas del if en cada nivel
     * de profundidad.
	 */
	private ArrayList<Integer> ifTags;
	/**
	 * Profundidad del bucle.
     * Se usa para controlar las etiquetas de condicional del código intermedio.
	 */
	private int whileLevel;
	 /**
     * Etiquetas de bucles.
     * Se usa para controlar las etiquetas de bucle del código intermedio.
	 */
	private ArrayList<Integer> whileTags;
    /**
     * Número de ramificas del código.
     * Contador de ramificas.
     */
    private int ramificas;
    /**
     * Ramas de cada ramifica.
     * Contador del número de ramas de cada ramifica.
     */
    private ArrayList<Integer> ramas;
	 	 
    /**
     * Parser constructor.
     *
     * @param scanner
     * @param mainProgram
     * @param projectPath
     * @param entVector
     */
    public Parser(Scanner scanner, String mainProgram, String projectPath, String entVector) {
        this.scanner = scanner;
        ts = new TablaDeSimbolos();
        this.mainProgram = mainProgram;
        this.projectPath = projectPath;
        this.entVector = entVector;
        tables = new Tablas();
        listCode = new C3D();
        functions = new ArrayList<>();
        ifLevel = -1;
        ifTags = new ArrayList<>();
        whileLevel = -1;
        whileTags = new ArrayList<>();
        ramificas = 0;
        ramas = new ArrayList<>();
    }

    /**
     * Report error.
     * @param message
     * @param info 
     */
    public void report_fatal_error ( String message , Object info ) throws SyntaxException { 
        String msg = getMessageError(message, info);
        System.err.println(msg);
        throw new SyntaxException("Error: Syntax Exception 1.\n"+msg);
	}
	
	/**
     * Unrecovered syntax error.
     * @param cur_token
     */
	public void unrecovered_syntax_error(Symbol cur_token) throws SyntaxException {
		System.out.println(cur_token.toString());
		throw new SyntaxException("Error: Syntax Exception 2.\n"+cur_token.toString());
	}
     
    /**
     * Get message error.
     * @param message
     * @param info 
     */
    private String getMessageError( String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info );
		if (s.left >= 0) {
			m.append(" in line "+(s.left+1));
			if (s.right>=0)
				m.append(", column "+(s.right+1));
			}
		}
		m.append(" : "+message);
		return m.toString();
    }
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= INIT PROG MAIN 
            {
              Object RESULT =null;
		
			// escribir la tabla de simbolos
            AccesoFichero af = new AccesoFichero();
            File tsFile = new File(projectPath + "/build/SymbolsTable.mc");
            af.writeFile(tsFile, listCode.toString());

            //Calcular desplazamientos y ocupacion
            tables.calculosDesplazamientoOcupacion();

            // escribir la abla de variables
            File varsTableFile = new File(projectPath + "/build/VariablesTable.mc");
            af.writeFile(varsTableFile, tables.variablesTableToString());

            // escribir la tabla de procedimientos
            File procsTableFile = new File(projectPath + "/build/ProceduresTable.mc");
            af.writeFile(procsTableFile, tables.proceduresTableToString());

            // escribir la tabla de etiquetas
            File tagsTableFile = new File(projectPath + "/build/TagsTable.mc");
            af.writeFile(tagsTableFile, tables.tagsTableToString());

            // directorio del código intermedio
            File dir = new File(projectPath + "/build/intermediateCode");
            dir.mkdir();

            // escribir el código de 3 direcciones
            File f = new File(projectPath + "/build/intermediateCode/c3@.mc");
            af.writeFile(f, listCode.toString());

            // generar codigo ensamblador
            listCode.generarCodigoEnsamblador(tables, projectPath, mainProgram, entVector);

            RESULT = "COMPILACIÓN CORRECTA \n\n";
            RESULT += "El ejecutable en ensamblador puede encontrase en " + projectPath + "\\assembly\\\n";

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= 
            {
              Object RESULT =null;
		
			// añadir los tipos a la ts
            ts.add("simbol", new d(dtipo.dtipus, tsb.ts_simbol, 2, Character.MIN_VALUE, Character.MAX_VALUE));
            ts.add("vector", new d(dtipo.dtipus, tsb.ts_vector, 0, 1024, 1024));       //2 bytes por caracter, maximo 2kb
            ts.add("tipus_pila", new d(dtipo.dtipus, tsb.ts_tipus_pila, 0, 1024, 1024));  //2 bytes por caracter, maximo 2kb
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // IDENT ::= id 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String) v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IDENT ::= letra 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String) v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDENT",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROC ::= IDENT openparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			//añadirlo a la tabla de procedimientos y coger su id
            int pid = tables.addProcedure((String) v, ts.getN(), 0, 0);
            tables.setLp(pid);

            // añadir la funcion a la ts
            d d = new d(dtipo.dfunc, tsb.ts_func, 0, 0, 0);
            d.setR(pid);
            ts.add((String) v, d);

            //Codigo intermedio
            listCode.generarCuadruplo(Instruccion.procedure_, null, null, new Operador(pid + "", TipoOperador.ref_proc));
            listCode.generarCuadruplo(Instruccion.preamble_, null, null, new Operador(pid + "", TipoOperador.ref_proc));

            // si el id es el main program, poner accepta a 0 como primera instruccion del programa
            if (((String) v).equals(mainProgram)) {
                // declarar el vector ent
                tables.addVector(entVector, pid, mainProgram);
            }

            RESULT = d;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROC",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARGS ::= CONTARG 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			int id = tables.getLp();
            String pname = tables.getProcedure(id).getNp();

            ArrayList params = (ArrayList<String>) r;
            if (pname.equals(mainProgram)) {
                if (params.size() != 1) {
                    throw new ComparisionException("Error: Comparision Exception 17.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + ".\n"
                        + "El programa principal '" + mainProgram + "' tiene más de un vector de entrada.");
                }
                // puede ser que decida cambiar el nombre del vector de entrada
                if (!entVector.equals((String) params.get(0))) {
                    throw new ComparisionException("Error: Comparision Exception 18.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + ".\n"
                        + "El vector de entrada '" + mainProgram + "' debe llamarse '" + entVector + "'.");
                }
            } else {
                // actualizar el numero de parametros
                tables.updateProcedureParams(id, params.size());
                for (int i = 0; i < params.size(); i++) {
                    ts.addParam((String) params.get(i), pname);
                    // relacionar los parametros
                    // buscamos una funcion que se llame como este procedimiento
                    int j = 0;
                    boolean found = false;
                    while (j < functions.size() && !found) {
                        if (params.size() != functions.get(j).getParams().size()) {
                            throw new ComparisionException("Error: Comparision Exception 19.\n"
                                + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + ".\n"
                                + "La llamada al subprograma '" + pname + "' no tiene la cantidad de argumentos especificada.");
                        }
                        if (functions.get(j).getNombre().equals(pname)) {
                            // buscar el vector con nombre de param(i)
                            Vector vector = tables.findVector(functions.get(j).getParams().get(i), functions.get(j).getProcedureCall());
                            Parametro param = new Parametro((String) params.get(i), pname);
                            vector.setParam(param);
                            found = true;
                        }
                        j++;
                    }
                }
            }
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROG ::= PROG programa PROC ARGS PAR DECL BLOC FINAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
				
            listCode.generarCuadruplo(Instruccion.endProcedure_, null, null, new Operador(((d) d).getR() + "", TipoOperador.ref_proc));			
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROG ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MAIN ::= 
            {
              Object RESULT =null;
		
			//Comprobamos existencia de la funcion main
            d def = ts.consult(mainProgram);
            if (def == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 1.\n"
                    + "No se encuentra el programa principal '" + mainProgram + "'.");
            }

            // rellenar los espacios en blanco
            listCode.fillBlankSpaces(functions, ts, tables);

            // check there are no blank spaces
            if (!listCode.checkBlankSpaces()) {
                throw new IntermediateCodeException("Error: Intermediate Code Exception 1.\n"
                    + "Se ha producido un error generando el código intermedio.");
            }

            //Generamos el codigo intermedio
            listCode.generarCuadruplo(Instruccion.call_, null, null, new Operador(def.getR() + "", TipoOperador.ref_proc));
            //Modificamos para que sea la primera instruccion
            listCode.primeraLlamada();
                
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PAR ::= closeparent 
            {
              Object RESULT =null;
		
			// entrar bloque
			ts.entrarBloque();
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PAR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FINAL ::= fi 
            {
              Object RESULT =null;
		
			//Despues salimos del bloque, donde se borraran las id de este bloque 
            // y los nombre de los parametros de entrada de la fucion si tiene
            ts.salirBloque();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FINAL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTARG ::= CONTARG coma id 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ArrayList<String> params = (ArrayList<String>) v1;
            params.add(v);
            RESULT = params;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTARG",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CONTARG ::= id 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList <String> params = new ArrayList<>();
            params.add(v);
            RESULT = params;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTARG",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CONTARG ::= CONTARG coma letra 
            {
              Object RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ArrayList<String> params = (ArrayList<String>) v1;
            params.add((String) v);
            RESULT = params;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTARG",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTARG ::= letra 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ArrayList <String> params = new ArrayList<>();
            params.add(v);
            RESULT = params;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTARG",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BLOC ::= INS BLOC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOC",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BLOC ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOC",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECL ::= DECL DECLS dospunts TIPO 
            {
              Object RESULT =null;
		int pilaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pilaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object pila = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = false;

			// si no hay pilas declaradas aún pero se va a declarar una
            if ("tipus_pila".equals((String) t)) {
                if (((String[]) ids).length != 1) { // mas de una pila declarada
                    throw new StackException("Error: Stack Exception 1.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + ".\n"
                        + "Se ha declarado más de una pila.");
                } else if (((String[]) ids).length == 1) {
                    if (ts.existePila()) {
                        throw new StackException("Error: Stack Exception 2.\n"
                            + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + ".\n"
                            + "Se ha declarado más de una pila.");
                    }
                    // DECLARAR PILA
                    tables.setStack(true);
                    d def = ts.consult((String) t);
                    int nvar = tables.addVariable(((String[]) ids)[0], tables.actualProcedure(), def.getSize(), 0, tsb.ts_tipus_pila);

                    //Creamos la variable local y la añadimos a la ts
                    d var = new d(dtipo.dvar, tsb.ts_tipus_pila, def.getSize(), def.getInfLimit(), def.getSupLimit());
                    var.setR(nvar);
                    ts.add(((String[]) ids)[0], var);
                    RESULT = true;  // hay pila declarada                    
                }
            } else {    // declarar los vectores o simbolos
                tsb tipo = null;
                switch ((String) t) {
                    case "simbol":
                        tipo = tsb.ts_simbol;
                        // asignar valor 'blanc' por defecto

                        for (String id : (String[]) ids) {

                            //Añadimos la variable a TV
                            d def = ts.consult((String) t);
                            int nvar = tables.addVariable(id, tables.actualProcedure(), def.getSize(), 0, tipo);

                            //Creamos variable temporal
                            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());
                            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
                            valor.setR(temp);
                            //Codigo intermedio
                            int blanc = '#';
                            listCode.generarCuadruplo(Instruccion.assig_, new Operador(blanc + "", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));

                            //Creamos la variable local y la añadimos a la ts
                            d var = new d(dtipo.dvar, tipo, def.getSize(), def.getInfLimit(), def.getSupLimit());
                            var.setR(nvar);
                            ts.add(id, var);
                            listCode.generarCuadruplo(Instruccion.assig_, new Operador(temp + "", TipoOperador.ref_simbol), null, new Operador(nvar + "", TipoOperador.ref_simbol));
                        }
                        break;
                    case "vector":
                        // crear el fichero de 2k de'blanc'
                        for (String id : (String[]) ids) {
                            // poner el vector en la tabla de vectores
                            int pid = tables.getLp();
                            String pname = tables.getProcedure(pid).getNp();
                            tables.addVector(id, pid, pname);
                        }
                        break;
                }
            }
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECL ::= 
            {
              Object RESULT =null;
		
			RESULT = false; // no hay pila declarada
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLS ::= DECLS coma IDENT 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            // añadir un id mas a la lista de ids existente
            String[] nids = new String[((String[]) ids).length + 1];
            for (int i = 0; i < ((String[]) ids).length; i++) {
                nids[i] = ((String[]) ids)[i];
            }
            nids[nids.length - 1] = ((String) v);

            RESULT = nids;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLS ::= IDENT 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            String ids[] = {((String) v)};
            RESULT = ids;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INS ::= DRET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INS ::= ESQUER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INS ::= ESCRIU 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INS ::= CD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INS ::= REPT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INS ::= RUTINA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INS ::= RAMIFICA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INS ::= EMPILA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INS ::= EMPILAP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INS ::= DESEMPILA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DRET ::= dreta openparent IDENT closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			d dvar = ts.consult((String) v);
            if (dvar != null) {
                throw new ComparisionException("Error: Comparision Exception 1.\n"
                    + (String) v + " no es un vector.");
            }

            Vector vector = tables.findVector((String) v, tables.actualProcedure());
            if (vector == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 2.\n"
                    + "El vector " + (String) v + " no ha sido declarado");
            }

            // codigo intermedio, hacer un dreta del vector
            listCode.generarCuadruplo(Instruccion.dreta_, null, null, new Operador(vector.getIdVector() + "", TipoOperador.ref_vector));
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DRET",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESQUER ::= esquerra openparent IDENT closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			d dvar = ts.consult((String) v);
            if (dvar != null) {
                throw new ComparisionException("Error: Comparision Exception 2.\n"
                    + (String) v + " no es un vector.");
            }

            Vector vector = tables.findVector((String) v, tables.actualProcedure());
            if (vector == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 3.\n"
                    + "El vector " + (String) v + " no ha sido declarado.");
            }

            // codigo intermedio, hacer un dreta del vector
            listCode.generarCuadruplo(Instruccion.esquerra_, null, null, new Operador(vector.getIdVector() + "", TipoOperador.ref_vector));

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESQUER",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESCRIU ::= escriure openparent IDENT coma TERM closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			d dsimbol = ts.consult((String) v);
            if (dsimbol != null) {
                if (dsimbol.getTsb() != tsb.ts_simbol) {
                    throw new SymbolTableException("Error: Symbol Table Exception 4.\n"
                        + "El identificador '" + (String) v + "' no ha sido declatado.");
                }
                // escribir un simbolo
                d term = (d) v1;
                // crear la variable temporal con el valor del numero binario
                int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);
                // guardar en una variable temporal el valor del TERM
                listCode.generarCuadruplo(Instruccion.assig_, new Operador(term.getR() + "", TipoOperador.ref_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));
                listCode.generarCuadruplo(Instruccion.assig_, new Operador(temp + "", TipoOperador.ref_simbol), null, new Operador(dsimbol.getR() + "", TipoOperador.ref_simbol));
            } else {
                Vector vector = tables.findVector((String) v, tables.actualProcedure());
                if (vector == null) {
                    throw new SymbolTableException("Error: Symbol Table Exception 4.\n"
                        + "El identificador '" + (String) v + "' no ha sido declarado.");
                }
                // escribir un vector
                d term = (d) v1;
                listCode.generarCuadruplo(Instruccion.escriure_, new Operador(term.getR() + "", TipoOperador.ref_simbol), null, new Operador(vector.getIdVector() + "", TipoOperador.ref_vector));
            }
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESCRIU",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESCRIU ::= escriure openparent accepta coma binario closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			if (!"0".equals((String) v) && !"1".equals((String) v)) {
                throw new ValueTypeException("Error: Value Type Exception 1.\n"
                    + "'accepta' debe tomar un valor binario.");
            }
            int simbol = v.charAt(0);
            // crear la variable temporal con el valor del numero binario
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);
            // guardar en una variable temporal el valor del binario
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(simbol + "", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));
            // guardar la variable temporal en la direccion de accepta
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(temp + "", TipoOperador.ref_simbol), null, new Operador("accepta", TipoOperador.ref_simbol));
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ESCRIU",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CD ::= si INITIF llavors BLOC CDNO fsi 
            {
              Object RESULT =null;
		
			 /*   cuando llegamos aqui ya se ha ejecutado la produccion INITIF,
                la producción BLOC y la produccion CDNO 
            */
            // nombre de t3
            int t3_numero = ifTags.get(ifLevel) + 2;
            String t3_name = "t_if_" + ifLevel + "_" + t3_numero;
            // goto t3
            listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(t3_name, null));
            // t3: skip
            listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t3_name, null));

            // salir del nivel del if
            ifTags.set(ifLevel, ifTags.get(ifLevel) + 3);
            ifLevel--;
            listCode.generarCuadruplo(Instruccion.endif_, null, null, null);
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CD",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INITIF ::= EXP 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			
			// entrar en nuevo nivel de if
            ifLevel++;
            if (ifTags.size() == ifLevel) { // si en ese nivel no se ha estado aún, añadirlo
                ifTags.add(0);
            }

            ArrayList<Integer> expresiones = (ArrayList<Integer>) exprs;

			int operator = 0;
			for (Integer exp: expresiones) {
				if (exp < 0 && operator == 0) {
					operator = exp;
				} else if (exp < 0 && operator != exp) {
					throw new ComparisionException("Error: Comparision Exception 21.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "Se han encontrado operadores diferentes en la expresión del condicional.");
				}
			}

            // creamos las etiquetas de este nivel
            Etiqueta t1 = new Etiqueta("t_if_" + ifLevel + "_" + ifTags.get(ifLevel), tables.actualProcedure());
            tables.addTag(t1);
            Etiqueta t2 = new Etiqueta("t_if_" + ifLevel + "_" + (ifTags.get(ifLevel) + 1), tables.actualProcedure());
            tables.addTag(t2);
            Etiqueta t3 = new Etiqueta("t_if_" + ifLevel + "_" + (ifTags.get(ifLevel) + 2), tables.actualProcedure());
            tables.addTag(t3);

            
            switch (operator) {
				case 0:		// caso normal, solo hay 1 operador           			
            		// if exp goto t1
            		listCode.generarCuadruplo(Instruccion.if_,
                		new Operador(expresiones.get(0) + "", TipoOperador.ref_simbol), null, new Operador(t1.getNombre(), null));
            		// goto t2
            		listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(t2.getNombre(), null));
            		// t1: skip
            		listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t1.getNombre(), null));
					break;
				case -1: 	// operador and
					for (Integer exp: expresiones) {
						if (exp > 0) {
							// if EXP goto t1
            				listCode.generarCuadruplo(Instruccion.ifnot_, new Operador(exp + "", TipoOperador.ref_simbol), null, new Operador(t2.getNombre(), null));
						}
						// goto t1
            			listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(t1.getNombre(), null));
            			// t1: skip
            			listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t1.getNombre(), null));
						break;
					}
					break;
				case -2:	// operador or
					for (Integer exp: expresiones) {
						if (exp > 0) {
							// if EXP goto t1
            				listCode.generarCuadruplo(Instruccion.if_, new Operador(exp + "", TipoOperador.ref_simbol), null, new Operador(t1.getNombre(), null));
						}
						// goto t2
            			listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(t2.getNombre(), null));
            			// t1: skip
            			listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t1.getNombre(), null));
						break;
					}
					break;
			}

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INITIF",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CDNO ::= si_no SINO BLOC 
            {
              Object RESULT =null;
		
            listCode.generarCuadruplo(Instruccion.sino_, null, null, null);
            RESULT = true; // devolvemos true, como que ha habido "else"
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CDNO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CDNO ::= SINO 
            {
              Object RESULT =null;
		
            RESULT = false; // devolvemos false, como que no ha habido "else"
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CDNO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SINO ::= 
            {
              Object RESULT =null;
		
			// calcular t2 y t3
            int t2_numero = ifTags.get(ifLevel) + 1;
            int t3_numero = ifTags.get(ifLevel) + 2;
            String t2_name = "t_if_" + ifLevel + "_" + t2_numero;
            String t3_name = "t_if_" + ifLevel + "_" + t3_numero;

            // goto t3
            listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(t3_name, null));
            // t2: skip
            listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t2_name, null));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINO",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // REPT ::= BEGIN MENTRE fer BLOC fmentre 
            {
              Object RESULT =null;
		
			// fin del mentre
            int t0_tag = whileTags.get(whileLevel);
            int t2_tag = whileTags.get(whileLevel) + 2;
            String t0_name = "t_while_" + whileLevel + "_" + t0_tag;
            String t2_name = "t_while_" + whileLevel + "_" + t2_tag;
            // goto t0
            listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(t0_name, null));
            // t2: skip
            listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t2_name, null));
            whileTags.set(whileLevel, whileTags.get(whileLevel) + 3);
            whileLevel--;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REPT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BEGIN ::= mentre 
            {
              Object RESULT =null;
		
			// entrar en nuevo nivel de while
            whileLevel++;
            if (whileTags.size() == whileLevel) {   // si en ese nivel no se ha estado aún, añadirlo
                whileTags.add(0);
            }

            // crear las etiquetas
            Etiqueta tw1 = new Etiqueta("t_while_" + whileLevel + "_" + whileTags.get(whileLevel), tables.actualProcedure());
            tables.addTag(tw1);
            Etiqueta tw2 = new Etiqueta("t_while_" + whileLevel + "_" + (whileTags.get(whileLevel) + 1), tables.actualProcedure());
            tables.addTag(tw2);
            Etiqueta tw3 = new Etiqueta("t_while_" + whileLevel + "_" + (whileTags.get(whileLevel) + 2), tables.actualProcedure());
            tables.addTag(tw3);

            int t0_tag = whileTags.get(whileLevel);
            String t0_name = "t_while_" + whileLevel + "_" + t0_tag;
            // t0: skip
            listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t0_name, null));
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BEGIN",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MENTRE ::= EXP 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			ArrayList<Integer> expresiones = (ArrayList<Integer>) exprs;

			int operator = 0;
			for (Integer exp: expresiones) {
				if (exp < 0 && operator == 0) {
					operator = exp;
				} else if (exp < 0 && operator != exp) {
					throw new ComparisionException("Error: Comparision Exception 20.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "Se han encontrado operadores diferentes en la expresión del bucle.");
				}
			}

			int t0_tag = whileTags.get(whileLevel);
            int t1_tag = whileTags.get(whileLevel) + 1;
            int t2_tag = whileTags.get(whileLevel) + 2;
            String t0_name = "t_while_" + whileLevel + "_" + t0_tag;
            String t1_name = "t_while_" + whileLevel + "_" + t1_tag;
            String t2_name = "t_while_" + whileLevel + "_" + t2_tag;

			switch (operator) {
				case 0:		// caso normal, solo hay 1 operador           			
            		// if EXP goto t1
            		listCode.generarCuadruplo(Instruccion.if_, new Operador(expresiones.get(0) + "", TipoOperador.ref_simbol), null, new Operador(t1_name, null));
            		// goto t2
            		listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(t2_name, null));
            		// t1: skip
            		listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t1_name, null));
					break;
				case -1: 	// operador and
					for (Integer exp: expresiones) {
						if (exp > 0) {
							// if EXP goto t1
            				listCode.generarCuadruplo(Instruccion.ifnot_, new Operador(exp + "", TipoOperador.ref_simbol), null, new Operador(t2_name, null));
						}
						// goto t1
            			listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(t1_name, null));
            			// t1: skip
            			listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t1_name, null));
						break;
					}
					break;
				case -2:	// operador or
					for (Integer exp: expresiones) {
						if (exp > 0) {
							// if EXP goto t1
            				listCode.generarCuadruplo(Instruccion.if_, new Operador(exp + "", TipoOperador.ref_simbol), null, new Operador(t1_name, null));
						}
						// goto t2
            			listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(t2_name, null));
            			// t1: skip
            			listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(t1_name, null));
						break;
					}
					break;
			}

			

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MENTRE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP ::= i 
            {
              Object RESULT =null;
		
		RESULT = Instruccion.and_;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP ::= o 
            {
              Object RESULT =null;
		
		RESULT = Instruccion.or_;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= EXPR 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList<Integer> expresiones = new ArrayList<Integer>();
		expresiones.add((Integer) r);
		RESULT = expresiones;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP OP EXPR 
            {
              Object RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exprs = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expresion = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		ArrayList<Integer> expresiones = (ArrayList<Integer>) exprs;
		switch ((Instruccion) op) {
			case and_:
				expresiones.add(-1);
				break;

			case or_:
				expresiones.add(-2);
				break;
		}
		
		expresiones.add((Integer) expresion);
        RESULT = expresiones;
	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPR ::= TERM relacional TERM 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			
			d term1 = (d) t1;
            d term2 = (d) t2;

            Instruccion i;
            if ("=".equals(r)) {
                i = Instruccion.igual_;
            } else {
                i = Instruccion.diferent_;
            }

            // crear la variable temporal con el valor del numero binario
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);

            // CMP t2-t1 --> temp
            listCode.generarCuadruplo(i,
                    new Operador(term1.getR() + "", TipoOperador.ref_simbol),
                    new Operador(term2.getR() + "", TipoOperador.ref_simbol),
                    new Operador(temp + "", TipoOperador.ref_simbol));

            // devolver la variable temporal
            RESULT = temp;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPR ::= BUIDA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPR ::= NOBUIDA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = r;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPR ::= TERM en abrirllave CONJUNT cerrarllave 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int elemsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elemsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object elems = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            d term1 = (d) t1;
            // crear la variable temporal
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);

            ArrayList<Integer> elementos = (ArrayList<Integer>) elems;
            if (elementos.size() == 1) {
                
                // CMP t1 = elemento --> temp
                listCode.generarCuadruplo(Instruccion.igual_,
                        new Operador(term1.getR() + "", TipoOperador.ref_simbol),
                        new Operador(elementos.get(0) + "", TipoOperador.ref_simbol),
                        new Operador(temp + "", TipoOperador.ref_simbol));
            } else {
                
                listCode.generarCuadruplo(Instruccion.igual_,
                        new Operador(term1.getR() + "", TipoOperador.ref_simbol),
                        new Operador(elementos.get(0) + "", TipoOperador.ref_simbol),
                        new Operador(temp + "", TipoOperador.ref_simbol));
                
                for (Integer elemento: elementos) {
                                
                    // crear la variable temporal
                    int temp1 = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);
                
                    listCode.generarCuadruplo(Instruccion.igual_,
                            new Operador(term1.getR() + "", TipoOperador.ref_simbol),
                            new Operador(elemento + "", TipoOperador.ref_simbol),
                            new Operador(temp1 + "", TipoOperador.ref_simbol));
                    
                    int tempOp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);

                    listCode.generarCuadruplo(Instruccion.or_,
                            new Operador(temp + "", TipoOperador.ref_simbol),
                            new Operador(temp1 + "", TipoOperador.ref_simbol),
                            new Operador(temp + "", TipoOperador.ref_simbol));
                }
            }

            // devolver la variable temporal
            RESULT = temp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPR ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPR ::= TERM no en abrirllave CONJUNT cerrarllave 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elemsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elemsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object elems = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            d term1 = (d) t1;
            // crear la variable temporal
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);

            ArrayList<Integer> elementos = (ArrayList<Integer>) elems;
            if (elementos.size() == 1) {
                
                // CMP t1 = elemento --> temp
                listCode.generarCuadruplo(Instruccion.diferent_,
                        new Operador(term1.getR() + "", TipoOperador.ref_simbol),
                        new Operador(elementos.get(0) + "", TipoOperador.ref_simbol),
                        new Operador(temp + "", TipoOperador.ref_simbol));
            } else {
                
                listCode.generarCuadruplo(Instruccion.diferent_,
                        new Operador(term1.getR() + "", TipoOperador.ref_simbol),
                        new Operador(elementos.get(0) + "", TipoOperador.ref_simbol),
                        new Operador(temp + "", TipoOperador.ref_simbol));
                
                for (Integer elemento: elementos) {
                                
                    // crear la variable temporal
                    int temp1 = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);
                
                    listCode.generarCuadruplo(Instruccion.diferent_,
                            new Operador(term1.getR() + "", TipoOperador.ref_simbol),
                            new Operador(elemento + "", TipoOperador.ref_simbol),
                            new Operador(temp1 + "", TipoOperador.ref_simbol));
                    
                    int tempOp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);

                    listCode.generarCuadruplo(Instruccion.and_,
                            new Operador(temp + "", TipoOperador.ref_simbol),
                            new Operador(temp1 + "", TipoOperador.ref_simbol),
                            new Operador(temp + "", TipoOperador.ref_simbol));
                }
            }

            // devolver la variable temporal
            RESULT = temp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPR ::= TERM relacional SIMB 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            
            d term1 = (d) t1;
            d term2 = (d) t2;

            Instruccion i;
            if ("=".equals(r)) {
                i = Instruccion.igual_;
            } else {
                i = Instruccion.diferent_;
            }

            // crear la variable temporal con el valor del numero binario
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);

            // CMP t2-t1 --> temp
            listCode.generarCuadruplo(i,
                    new Operador(term1.getR() + "", TipoOperador.ref_simbol),
                    new Operador(term2.getR() + "", TipoOperador.ref_simbol),
                    new Operador(temp + "", TipoOperador.ref_simbol));

            // devolver la variable temporal
            RESULT = temp;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONJUNT ::= CONJUNT coma letra 
            {
              Object RESULT =null;
		int elemsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elemsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object elems = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Integer> elementos = (ArrayList<Integer>) elems;
            
            d def = ts.consult("simbol");
            //Convertimos string a char
            String numeroString = (String) v;
            if (numeroString.length() != 1) {
                throw new ComparisionException("Error: Comparision Exception 15.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + numeroString + " debe ser de tipo 'simbol'.");
            }

            int letra = numeroString.charAt(0);
            //Comparamos con su limite superior
            if (letra > def.getSupLimit()) {
                throw new ComparisionException("Error: Comparision Exception 16.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "El valor instroducido de 'simbol' supera el limite superior: " + def.getSupLimit());
            }
            //Creamos variable temporal
            int simbol = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(simbol);

            //Codigo intermedio
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(letra + "", TipoOperador.val_simbol), null, new Operador(simbol + "", TipoOperador.ref_simbol));
            
            elementos.add((Integer) simbol);
            RESULT = elementos;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNT",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONJUNT ::= letra 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Integer> elementos = new ArrayList<Integer>();
            
            d def = ts.consult("simbol");
            //Convertimos string a char
            String numeroString = (String) v;
            if (numeroString.length() != 1) {
                throw new ComparisionException("Error: Comparision Exception 15.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + numeroString + " debe ser de tipo 'simbol'.");
            }

            int letra = numeroString.charAt(0);
            //Comparamos con su limite superior
            if (letra > def.getSupLimit()) {
                throw new ComparisionException("Error: Comparision Exception 16.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "El valor instroducido de 'simbol' supera el limite superior: " + def.getSupLimit());
            }
            //Creamos variable temporal
            int simbol = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(simbol);

            //Codigo intermedio
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(letra + "", TipoOperador.val_simbol), null, new Operador(simbol + "", TipoOperador.ref_simbol));
            
            elementos.add((Integer) simbol);
            RESULT = elementos;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNT",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONJUNT ::= CONJUNT coma SIMB 
            {
              Object RESULT =null;
		int elemsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elemsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object elems = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int simbolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simbolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object simbol = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Integer> elementos = (ArrayList<Integer>) elems;
            d term1 = (d) simbol;
            elementos.add((Integer) term1.getR());
            RESULT = elementos;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNT",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONJUNT ::= SIMB 
            {
              Object RESULT =null;
		int simbolleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simbolright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object simbol = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            ArrayList<Integer> elementos = new ArrayList<Integer>();
            d term1 = (d) simbol;
            elementos.add((Integer) term1.getR());
            RESULT = elementos;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONJUNT",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPO ::= simbol 
            {
              Object RESULT =null;
		
				RESULT = "simbol";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPO ::= vector 
            {
              Object RESULT =null;
		
				RESULT = "vector";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // TIPO ::= tipus_pila 
            {
              Object RESULT =null;
		
				RESULT = "tipus_pila";
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RUTINA ::= IDENT openparent CONTARG closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			//Comprobamos que existe id
            d dproc = ts.consult((String) v);
            if (dproc == null) {
                // hay que declarar la llamada más adelante
                ArrayList<String> params = (ArrayList<String>) ids;
                int idx = listCode.addBlankSpace();
                ParserFunc func = new ParserFunc(((String) v), idx, params, tables.actualProcedure());
                functions.add(func);
            } else {
                //Comprobamos que unicamente sea una funcion
                if (dproc.getDtipo() != dtipo.dfunc) {
                    throw new ComparisionException("Error: Comparision Exception 3.\n"
                            + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                            + "El identificador '" + (String) v + "' no hace referencia a un subprograma.");
                }
                // añadir los parametros
                ArrayList<String> params = (ArrayList) ids;
                for (int i = 0; i < params.size(); i++) {
                    int pid = dproc.getR();
                    Parametro param = ts.findParam(i, pid);
                    if (param == null) {
                        throw new SymbolTableException("Error: Symbol Table Exception 14.\n"
                            + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                            + "Errpr en el número de parámetros del subprograma '" + ((String) v) + "'.");
                    }
                    Vector vector = tables.findVector(params.get(i), tables.actualProcedure());
                    // intentar enlazarlo con un parametro
                    if (!ts.linkParam(param, params.get(i), tables.getProcedure(pid).getNp())) {
                        throw new SymbolTableException("Error: Symbol Table Exception 15.\n"
                            + "Error producido en  " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                            + "El vector '" + params.get(i) + "' no ha sido encontrado.");
                    }
                    // asociar el vector con el parametro
                    vector.setParam(param);
                    // codigo intermedio de la llamada
                    listCode.generarCuadruplo(Instruccion.call_, null, null, new Operador(vector.getIdProcedimiento() + "", TipoOperador.ref_proc));
                }
            }
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RUTINA",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RAMIFICA ::= RAMIFICAS framificar 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			String ramifica_tag = "t_end_ramifica_" + ramificas;
            Etiqueta tag = new Etiqueta(ramifica_tag, tables.actualProcedure());
            tables.addTag(tag);
            listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(ramifica_tag, null));
            listCode.generarCuadruplo(Instruccion.framifica_, null, null, new Operador(""+ramificas, null));
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RAMIFICA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RAMIFICAS ::= ramificar BR BLOC amb AR BLOC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RAMIFICAS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RAMIFICAS ::= RAMIFICAS amb AR BLOC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RAMIFICAS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BR ::= 
            {
              Object RESULT =null;
		
			// empieza ramifica
            ramificas++;
            listCode.generarCuadruplo(Instruccion.ramifica_, null, null, new Operador(""+ramificas, null));
                    
            // empieza la rama 1
            ramas.add(1);
            String ramifica_tag = "t_ramifica_" + ramificas + "_" + ramas.get(ramas.size() - 1);
            Etiqueta tag = new Etiqueta(ramifica_tag, tables.actualProcedure());
            tables.addTag(tag);
            listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(ramifica_tag, null));
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AR ::= 
            {
              Object RESULT =null;
		
			// fin de la rama anterior, si se ha ejecutado ir al final
            String end_tag = "t_end_ramifica_" + ramificas;
            listCode.generarCuadruplo(Instruccion.goto_, null, null, new Operador(end_tag, null));
                    
            // nueva rama en ramifica
            ramas.set(ramas.size()-1, ramas.get(ramas.size() - 1)+1);
            String ramifica_tag = "t_ramifica_" + ramificas + "_" + ramas.get(ramas.size() - 1);
            Etiqueta tag = new Etiqueta(ramifica_tag, tables.actualProcedure());
            tables.addTag(tag);
            listCode.generarCuadruplo(Instruccion.skip_, null, null, new Operador(ramifica_tag, null));
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EMPILA ::= empilar openparent IDENT coma TERM closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			// el id tiene que ser un simbolo
            // consultar id es tipus_pila
            d d = ts.consult((String) v);
            if (d == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 5.\n"
                        + "El 'tipus_pila' " + (String) v + " no ha sido declarado.");
            } else if (d.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 4.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "La variable '" + (String) v + "' debe ser 'tipus_pila'.");
            }

            d term = (d) t;
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);

            // escribir en una variable temporal el simbolo t
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(term.getR() + "", TipoOperador.ref_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));

            // insertar en la pila el valor temporal
            listCode.generarCuadruplo(Instruccion.empila_, new Operador(temp + "", TipoOperador.ref_simbol), null, null);
       		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPILA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EMPILA ::= empilar openparent IDENT coma SIMB closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        	// el id tiene que ser un simbolo
            // consultar id es tipus_pila
            d d = ts.consult((String) v);
            if (d == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 5.\n"
                        + "El 'tipus_pila' " + (String) v + " no ha sido declarado.");
            } else if (d.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 4.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "La variable '" + (String) v + "' debe ser 'tipus_pila'.");
            }

            d term = (d) t;
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(term.getR() + "", TipoOperador.ref_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));
            listCode.generarCuadruplo(Instruccion.empila_, new Operador(temp + "", TipoOperador.ref_simbol), null, null);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPILA",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SIMB ::= i 
            {
              Object RESULT =null;
		
			d def = ts.consult("simbol");
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);
            listCode.generarCuadruplo(Instruccion.assig_, new Operador("'i'", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));
            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);
            RESULT = valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMB",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SIMB ::= o 
            {
              Object RESULT =null;
		
			d def = ts.consult("simbol");
			int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);
            listCode.generarCuadruplo(Instruccion.assig_, new Operador("'o'", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));
            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);
            RESULT = valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMB",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SIMB ::= accepta 
            {
              Object RESULT =null;
		
			d def = ts.consult("simbol");
			int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());
            listCode.generarCuadruplo(Instruccion.assig_, new Operador("accepta", TipoOperador.ref_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));
            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);
            RESULT = valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMB",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EMPILAP ::= empilar_par openparent IDENT coma id closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			// el id tiene que ser un simbolo
            // consultar id es tipus_pila
            d d = ts.consult((String) v);
            if (d == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 5.\n"
                    + "El 'tipus_pila' " + (String) v + " no ha sido declarado.");
            } else if (d.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 4.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "La variable " + (String) v + " debe ser 'tipus_pila'.");
            }

            for (int i = t.length()-1; i >= 0; i--) {
                d def = ts.consult("simbol");
                if (def == null) {
                    throw new SymbolTableException("Error: Symbol Table Exception 17.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "El tipo 'simbol' no existe");
                }
                //Convertimos string a char
                String numeroString = (String) t;

                int letra = numeroString.charAt(i);
                //Comparamos con su limite superior
                if (letra > def.getSupLimit()) {
                    throw new ComparisionException("Error: Comparision Exception 20.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "El valor introducido de 'simbol' supera el límite superior: " + def.getSupLimit());
                }
                //Creamos variable temporal
                int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

                d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
                valor.setR(temp);

                //Codigo intermedio
                listCode.generarCuadruplo(Instruccion.assig_, new Operador(letra + "", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));

                // insertar en la pila el valor temporal
                listCode.generarCuadruplo(Instruccion.empila_, new Operador(temp + "", TipoOperador.ref_simbol), null, null);
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPILAP",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EMPILAP ::= empilar_par openparent IDENT coma SIMB closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            d d = ts.consult((String) v);
            if (d == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 5.\n"
                        + "El 'tipus_pila' " + (String) v + " no ha sido declarado.");
            } else if (d.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 4.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "La variable '" + (String) v + "' debe ser 'tipus_pila'.");
            }

            d term = (d) t;
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(term.getR() + "", TipoOperador.ref_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));
            listCode.generarCuadruplo(Instruccion.empila_, new Operador(temp + "", TipoOperador.ref_simbol), null, null);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPILAP",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EMPILAP ::= empilar_par openparent IDENT coma letra closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            d d = ts.consult((String) v);
            if (d == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 5.\n"
                        + "El 'tipus_pila' " + (String) v + " no ha sido declarado.");
            } else if (d.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 4.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "La variable '" + (String) v + "' debe ser 'tipus_pila'.");
            }

            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), 2, 0, tsb.ts_simbol);
            listCode.generarCuadruplo(Instruccion.assig_, new Operador("'"+(String) t + "'", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));
            listCode.generarCuadruplo(Instruccion.empila_, new Operador(temp + "", TipoOperador.ref_simbol), null, null);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPILAP",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EMPILAP ::= empilar_par openparent IDENT coma PALABRA closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        	// el id tiene que ser un simbolo
            // consultar id es tipus_pila
            d d = ts.consult((String) v);
            if (d == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 5.\n"
                    + "El 'tipus_pila' " + (String) v + " no ha sido declarado.");
            } else if (d.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 4.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "La variable " + (String) v + " debe ser 'tipus_pila'.");
            }

            for (int i = ((String) t).length()-1; i >= 0 ; i--) {
                d def = ts.consult("simbol");
                if (def == null) {
                    throw new SymbolTableException("Error: Symbol Table Exception 17.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "El tipo 'simbol' no existe");
                }
                //Convertimos string a char
                String numeroString = (String) t;

                int letra = numeroString.charAt(i);
                //Comparamos con su limite superior
                if (letra > def.getSupLimit()) {
                    throw new ComparisionException("Error: Comparision Exception 20.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "El valor introducido de 'simbol' supera el límite superior: " + def.getSupLimit());
                }
                //Creamos variable temporal
                int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

                d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
                valor.setR(temp);

                //Codigo intermedio
                listCode.generarCuadruplo(Instruccion.assig_, new Operador(letra + "", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));

                // insertar en la pila el valor temporal
                listCode.generarCuadruplo(Instruccion.empila_, new Operador(temp + "", TipoOperador.ref_simbol), null, null);
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EMPILAP",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PALABRA ::= programa 
            {
              Object RESULT =null;
		 RESULT = "programa"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PALABRA ::= fi 
            {
              Object RESULT =null;
		 RESULT = "fi"; 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // PALABRA ::= dreta 
            {
              Object RESULT =null;
		 RESULT = "dreta"; 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PALABRA ::= esquerra 
            {
              Object RESULT =null;
		 RESULT = "esquerra"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PALABRA ::= escriure 
            {
              Object RESULT =null;
		 RESULT = "escriure"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PALABRA ::= si 
            {
              Object RESULT =null;
		 RESULT = "si";		 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PALABRA ::= fsi 
            {
              Object RESULT =null;
		 RESULT = "fsi"; 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PALABRA ::= si_no 
            {
              Object RESULT =null;
		 RESULT = "si_no"; 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PALABRA ::= llavors 
            {
              Object RESULT =null;
		 RESULT = "llavors"; 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PALABRA ::= mentre 
            {
              Object RESULT =null;
		 RESULT = "mentre";	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PALABRA ::= fer 
            {
              Object RESULT =null;
		 RESULT = "fer"; 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PALABRA ::= fmentre 
            {
              Object RESULT =null;
		 RESULT = "fmentre";	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PALABRA ::= llegir 
            {
              Object RESULT =null;
		 RESULT = "llegir"; 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PALABRA ::= ramificar 
            {
              Object RESULT =null;
		 RESULT = "ramificar"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PALABRA ::= amb 
            {
              Object RESULT =null;
		 RESULT = "amb"; 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PALABRA ::= framificar 
            {
              Object RESULT =null;
		 RESULT = "framificar"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PALABRA ::= vector 
            {
              Object RESULT =null;
		 RESULT = "vector"; 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PALABRA ::= simbol 
            {
              Object RESULT =null;
		 RESULT = "simbol"; 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PALABRA ::= tipus_pila 
            {
              Object RESULT =null;
		 RESULT = "tipus_pila"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PALABRA ::= dospunts 
            {
              Object RESULT =null;
		 RESULT = "dospunts"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PALABRA ::= openparent 
            {
              Object RESULT =null;
		 RESULT = "openparent"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PALABRA ::= closeparent 
            {
              Object RESULT =null;
		 RESULT = "closeparent"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PALABRA ::= coma 
            {
              Object RESULT =null;
		 RESULT = "coma"; 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PALABRA ::= blanc 
            {
              Object RESULT =null;
		 RESULT = "blanc";	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PALABRA ::= empilar 
            {
              Object RESULT =null;
		 RESULT = "empilar";	 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PALABRA ::= empilar_par 
            {
              Object RESULT =null;
		 RESULT = "empilar_par"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PALABRA ::= desempilar 
            {
              Object RESULT =null;
		 RESULT = "desempilar"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PALABRA ::= cim 
            {
              Object RESULT =null;
		 RESULT = "cim"; 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PALABRA ::= buida 
            {
              Object RESULT =null;
		 RESULT = "buida"; 		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PALABRA ::= no 
            {
              Object RESULT =null;
		 RESULT = "no"; 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // PALABRA ::= abrirllave 
            {
              Object RESULT =null;
		 RESULT = "abrirllave"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // PALABRA ::= cerrarllave 
            {
              Object RESULT =null;
		 RESULT = "cerrarllave"; 	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // PALABRA ::= en 
            {
              Object RESULT =null;
		 RESULT = "en"; 			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PALABRA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DESEMPILA ::= desempilar openparent IDENT closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			// consultar id es tipus_pila
            d d = ts.consult((String) v);
            if (d == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 6"
                    + "El 'tipus_pila' " + (String) v + " no ha sido delcarado.");
            } else if (d.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 5.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "La variable " + (String) v + " debe ser 'tipus_pila'.");
            }

            // desempilar la pila
            listCode.generarCuadruplo(Instruccion.desempila_, null, null, null);

		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESEMPILA",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // BUIDA ::= buida openparent IDENT closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			// consultar id es tipus_pila
            d d = ts.consult((String) v);
            if (d == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 7.\n"
                    + "El 'tipus_pila' " + (String) v + " no ha sido declarado.");
            } else if (d.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 6.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "La variable " + (String) v + " debe ser 'tipus_pila'.");
            }
            
            d def = ts.consult("simbol");
            // devolver TRUE si la pila esta vacia
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, tsb.ts_simbol);

            // lo guardamos en un simbolo
            listCode.generarCuadruplo(Instruccion.buida_, new Operador(d.getR() + "", TipoOperador.ref_stack), null, new Operador(temp + "", TipoOperador.ref_simbol));

            RESULT = temp;
            
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BUIDA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NOBUIDA ::= no buida openparent IDENT closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			// consultar id es tipus_pila
            d d = ts.consult((String) v);
            if (d == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 8.\n"
                    + "El 'tipus_pila' " + (String) v + " no ha sido declarado.");
            } else if (d.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 7.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "La variable " + (String) v + " debe ser 'tipus_pila'.");
            }

            d def = ts.consult("simbol");
            // devolver TRUE si la pila esta vacia
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, tsb.ts_simbol);

            // lo guardamos en un simbolo
            listCode.generarCuadruplo(Instruccion.nobuida_, new Operador(d.getR() + "", TipoOperador.ref_stack), null, new Operador(temp + "", TipoOperador.ref_simbol));

            RESULT = temp;
            
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOBUIDA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TERM ::= letra 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			d def = ts.consult("simbol");
            if (def == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 16.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "El tipo 'simbol' no existe");
            }
            //Convertimos string a char
            String numeroString = (String) v;
            if (numeroString.length() != 1) {
                throw new ComparisionException("Error: Comparision Exception 15.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + numeroString + " debe ser de tipo 'simbol'.");
            }

            int letra = numeroString.charAt(0);
            //Comparamos con su limite superior
            if (letra > def.getSupLimit()) {
                throw new ComparisionException("Error: Comparision Exception 16.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "El valor instroducido de 'simbol' supera el limite superior: " + def.getSupLimit());
            }
            //Creamos variable temporal
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);

            //Codigo intermedio
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(letra + "", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));

            RESULT = (d) valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TERM ::= numero 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			d def = ts.consult("simbol");
            if (def == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 9.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "El tipo 'simbol' no existe.");
            }
            //Convertimos string a char
            String numeroString = (String) v;
            if (numeroString.length() != 1) {
                throw new ComparisionException("Error: Comparision Exception 9.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + numeroString + " debe ser de tipo 'simbol'.");
            }

            int numero = numeroString.charAt(0);
            //Comparamos con su limite superior
            if (numero > def.getSupLimit()) {
                throw new ComparisionException("Error: Comparision Exception 8.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "El valor de 'simbol' excede el límite superior: " + def.getSupLimit());
            }
            //Creamos variable temporal
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);

            //Codigo intermedio
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(numero + "", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));

            RESULT = (d) valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TERM ::= binario 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			d def = ts.consult("simbol");
            if (def == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 9.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "El tipo 'simbol' no existe.");
            }
            //Convertimos string a char
            String numeroString = (String) v;
            if (numeroString.length() != 1) {
                throw new ComparisionException("Error: Comparision Exception 9.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + numeroString + " debe ser de tipo 'simbol'.");
            }

            int numero = numeroString.charAt(0);
            //Comparamos con su limite superior
            if (numero > def.getSupLimit()) {
                throw new ComparisionException("Error: Comparision Exception 8.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "El valor de 'simbol' excede el límite superior: " + def.getSupLimit());
            }
            //Creamos variable temporal
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);

            //Codigo intermedio
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(numero + "", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));

            RESULT = (d) valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TERM ::= blanc 
            {
              Object RESULT =null;
		
			d def = ts.consult("simbol");
            if (def == null) {
                throw new ComparisionException("Error: Comparision Exception 10.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "El tipo 'simbol' no existe.");
            }

            //Creamos variable temporal
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);

            //Codigo intermedio
            int blanc = '#';
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(blanc + "", TipoOperador.val_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));

            RESULT = (d) valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TERM ::= id 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			// el term es un simbol
            d def = ts.consult((String) v);
            if (def == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 10.\n"
                    + "El simbol " + (String) v + " no ha sido declarado.");
            } else if (def.getTsb() != tsb.ts_simbol) {
                throw new ComparisionException("Error: Comparision Exception 11.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + (String) v + " debe ser de tipo 'simbol'.");
            }

            //Creamos variable temporal
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

            //Codigo intermedio
            listCode.generarCuadruplo(Instruccion.assig_, new Operador(def.getR() + "", TipoOperador.ref_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));

            //devolvemos el objeto d
            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);

            RESULT = (d) valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TERM ::= llegir openparent id closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            // puede ser simbolo o vector
            d dsimbol = ts.consult((String) v);
            if (dsimbol != null) {      // leer simbolo
                if (dsimbol.getTsb() != tsb.ts_simbol) {
                    throw new ComparisionException("Error: Comparision Exception 12.\n"
                        + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                        + "El identificador " + (String) v + " debe ser de tipo 'simbol' o 'vector'.");
                }
                //Creamos variable temporal
                int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), dsimbol.getSize(), 0, dsimbol.getTsb());
                //Codigo intermedio
                listCode.generarCuadruplo(Instruccion.assig_, new Operador(dsimbol.getR() + "", TipoOperador.ref_simbol), null, new Operador(temp + "", TipoOperador.ref_simbol));
                //devolvemos el objeto d
                d valor = new d(dtipo.idnulla, dsimbol.getTsb(), dsimbol.getSize(), dsimbol.getInfLimit(), dsimbol.getSupLimit());
                valor.setR(temp);
                RESULT = valor;
            } else {        // leer vector
                Vector vector = tables.findVector(v, tables.actualProcedure());
                if (vector == null) {
                    throw new SymbolTableException("Error: Symbol Table Exception 11.\n"
                        + "La variable '" + (String) v + "' no ha sido declarada.");
                }
                dsimbol = ts.consult("simbol");
                //Creamos variable temporal
                int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), dsimbol.getSize(), 0, dsimbol.getTsb());
                //Codigo intermedio
                listCode.generarCuadruplo(Instruccion.llegir_, new Operador(vector.getIdVector() + "", TipoOperador.ref_vector), null, new Operador(temp + "", TipoOperador.ref_simbol));
                //devolvemos el objeto d
                d valor = new d(dtipo.idnulla, dsimbol.getTsb(), dsimbol.getSize(), dsimbol.getInfLimit(), dsimbol.getSupLimit());
                valor.setR(temp);
                RESULT = valor;
            }
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TERM ::= llegir openparent accepta closeparent 
            {
              Object RESULT =null;
		
			d def = ts.consult("simbol");
            //Creamos variable temporal donde se guardara el valor de accepta
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());
            //Codigo intermedio
            listCode.generarCuadruplo(Instruccion.assig_, new Operador("accepta", TipoOperador.ref_vector), null, new Operador(temp + "", TipoOperador.ref_simbol));
            //devolvemos el objeto d
            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);
            RESULT = valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // TERM ::= cim openparent IDENT closeparent 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			// consultar id = tipus_pila
            d def = ts.consult((String) v);
            if (def == null) {
                throw new SymbolTableException("Error: Symbol Table Exception 12.\n"
                    + (String) v + " no ha sido declarado.");
            } else if (def.getTsb() != tsb.ts_tipus_pila) {
                throw new ComparisionException("Error: Comparision Exception 13.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + (String) v + " debe ser 'tipus_pila'.");
            }

            //Comprobamos que no sea un metodo
            if (def.getDtipo() == dtipo.dfunc) {
                throw new ComparisionException("Error: Comparision Exception 14.\n"
                    + "Error producido en " + scanner.getYyline() + ":" + scanner.getYycolumn() + "\n"
                    + "'" + (String) v + "' is una función.");
            }

            def = ts.consult("simbol");
            //Creamos variable temporal
            int temp = tables.addVariable("t" + tables.getVariablesTableSize(), tables.actualProcedure(), def.getSize(), 0, def.getTsb());

            //Codigo intermedio
            listCode.generarCuadruplo(Instruccion.cim_, null, null, new Operador(temp + "", TipoOperador.ref_simbol));

            //devolvemos el objeto d
            d valor = new d(dtipo.idnulla, def.getTsb(), def.getSize(), def.getInfLimit(), def.getSupLimit());
            valor.setR(temp);

            RESULT = (d) valor;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERM",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
