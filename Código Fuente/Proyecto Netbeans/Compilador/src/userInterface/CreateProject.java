package userInterface;

import data.AccesoFichero;
import data.Data;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Mar√≠a del Mar Cardona
 */
public class CreateProject extends javax.swing.JFrame {

    /**
     * Datos del proyecto.
     */
    private Data data;

    /**
     * Crear proyecto.
     * Crea un nuevo form para crear un proyecto.
     */
    public CreateProject() {
        initComponents();
        data = new Data();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        projectNameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        projectDirectoryField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        createProjectButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        entVectorLabel = new javax.swing.JLabel();
        entVectorName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(300, 200));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Nuevo proyecto");

        jLabel2.setText("Nombre:");

        jLabel3.setText("Directorio del proyecto:");

        projectDirectoryField.setEditable(false);

        browseButton.setText("Explorar");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("El nombre del proyecto define el nombre de la carpeta del proyecto y del programa principal.");

        createProjectButton.setText("Crear");
        createProjectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createProjectButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        entVectorLabel.setText("Vector de entrada:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(entVectorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(entVectorName, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(projectDirectoryField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(cancelButton)
                .addGap(18, 18, 18)
                .addComponent(createProjectButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(229, 229, 229))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(entVectorLabel)
                        .addComponent(entVectorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(projectNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(projectDirectoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createProjectButton)
                    .addComponent(cancelButton))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
        StarterPage sp = new StarterPage(data);
        sp.startUI();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnValue = fc.showOpenDialog(CreateProject.this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            String path = fc.getSelectedFile().getAbsolutePath();
            projectDirectoryField.setText(path);
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void createProjectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createProjectButtonActionPerformed
        if (checkFields() && checkProjectName()) {
            File folder = new File(projectDirectoryField.getText() + "/" + projectNameField.getText());
            boolean r = folder.mkdir();
            if (!r) {
                JOptionPane.showMessageDialog(this, "Error creating the project directory", "ERROR", JOptionPane.ERROR_MESSAGE);
            } else {
                data.setCurrentProjectPath(folder.getAbsolutePath());
                data.setCurrentProjectName(folder.getName());
                data.setScriptActual(projectNameField.getText() + ".tc");
                data.setNombreVectorEnt(entVectorName.getText());
                // crear el directorio de los scrips
                File scriptsFolder = new File(folder.getAbsolutePath() + "/scripts");
                scriptsFolder.mkdir();
                File script = new File(folder.getAbsolutePath() + "/scripts/" + projectNameField.getText() + ".tc");
                try {
                    // create mark file
                    File mkfile = new File(data.getProjectPath()+ "/markfile.mccompiler");
                    mkfile.createNewFile();
                    // create build directory
                    File buildDirectory = new File(data.getProjectPath()+"/build");
                    buildDirectory.mkdir();
                   
                    // create project script
                    r = script.createNewFile();
                    if (!r) {
                        JOptionPane.showMessageDialog(this, "Error creating the project main script", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                    // create the main program file
                    String mainProgram = ""
                            + "programa " + projectNameField.getText() + " ("+data.getNombreVectorEnt()+") \n"
                            + "\n"
                            + "fi";
                    BufferedWriter writer = new BufferedWriter(new FileWriter(script));
                    writer.write(mainProgram);
                    writer.close();
                    
                    File files = new File(buildDirectory.getPath()+"/files");
                    files.mkdir();
                    
                    File entFile = new File(files.getPath()+"/"+data.getNombreVectorEnt());
                    char[] content = new char[1024];
                    Arrays.fill(content, '#');
                    String vectorContent = new String(content);
                    AccesoFichero af = new AccesoFichero();
                    af.writeFile(entFile, vectorContent);
                    
                } catch (IOException ex) {
                    Logger.getLogger(CreateProject.class.getName()).log(Level.SEVERE, null, ex);
                }
                this.dispose();
                UserInterface ui = new UserInterface(data);
                ui.showUI();
            }

        }
    }//GEN-LAST:event_createProjectButtonActionPerformed

    /**
     * Comprobar que los campos no est√°n vac√≠os.
     * @return true si todos han sido debidamente rellenados.
     */
    private boolean checkFields() {
        if ("".equals(projectNameField.getText())) {
            JOptionPane.showMessageDialog(this, "Please, fill the project name field", "ERROR", JOptionPane.ERROR_MESSAGE);
            return false;
        } else if ("".equals(projectDirectoryField.getText())) {
            JOptionPane.showMessageDialog(this, "Please, fill the project directory field", "ERROR", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Comprobar que este proyecto no existe en el directorio actual.
     * @return falso si ya existe.
     */
    private boolean checkProjectName() {
        File f = new File(projectDirectoryField.getText());
        File files[] = f.listFiles();
        for (File fi : files) {
            if (fi.getName().equals(projectNameField.getText())) {
                JOptionPane.showMessageDialog(this, "This project already exists in this directory", "ERROR", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        return true;
    }

    /**
     * Mostrar interfaz.
     */
    public void start() {
        this.setLocationRelativeTo(null);
        this.pack();
        this.setVisible(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createProjectButton;
    private javax.swing.JLabel entVectorLabel;
    private javax.swing.JTextField entVectorName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField projectDirectoryField;
    private javax.swing.JTextField projectNameField;
    // End of variables declaration//GEN-END:variables
}
